diff --git a/Android.mk b/Android.mk
index 1fc1a34..f6bd934 100644
--- a/Android.mk
+++ b/Android.mk
@@ -28,7 +28,11 @@ LOCAL_CERTIFICATE := platform
 LOCAL_SRC_FILES := $(call all-java-files-under, src)
 
 LOCAL_PACKAGE_NAME := FMRadio
+ifeq ($(strip $(BOARD_HAVE_FMRADIO_BCM)),true)
+LOCAL_STATIC_JAVA_LIBRARIES += com.broadcom.fm
+else
 LOCAL_JNI_SHARED_LIBRARIES := libfmjni
+endif
 
 LOCAL_PROGUARD_ENABLED := disabled
 LOCAL_PRIVILEGED_MODULE := true
@@ -40,4 +44,6 @@ LOCAL_AAPT_FLAGS := --auto-add-overlay --extra-packages android.support.v7.cardv
 
 include $(BUILD_PACKAGE)
 
+ifneq ($(strip $(BOARD_HAVE_FMRADIO_BCM)),true)
 include $(call all-makefiles-under,$(LOCAL_PATH))
+endif
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 7898fb0..19f0493 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -32,14 +32,16 @@
     <uses-permission android:name="android.permission.ACCESS_FM_RADIO" />
     <uses-permission android:name="android.permission.ACCESS_MOCK_LOCATION" />
     <uses-permission android:name="android.permission.BLUETOOTH" />
+    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.MODIFY_AUDIO_ROUTING" />
     <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
     <uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS" />
     <uses-permission android:name="android.permission.READ_PHONE_STATE" />
-    <uses-permission android:name="android.permission.RECORD_AUDIO" />
     <uses-permission android:name="android.permission.WAKE_LOCK" />
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.RECORD_AUDIO" />
+    <uses-permission android:name="android.permission.CAPTURE_AUDIO_OUTPUT" />
 
     <application
         android:hardwareAccelerated="true"
diff --git a/src/com/android/fmradio/FmListener.java b/src/com/android/fmradio/FmListener.java
index e060c52..fad83b4 100644
--- a/src/com/android/fmradio/FmListener.java
+++ b/src/com/android/fmradio/FmListener.java
@@ -84,6 +84,7 @@ public interface FmListener {
     int MSGID_SET_CHANNEL_FINISHED = 6;
     int MSGID_SET_MUTE_FINISHED = 7;
     // Fm main
+    int MSGID_OPENDEVICE_FINISHED = 8;
     int MSGID_POWERUP_FINISHED = 9;
     int MSGID_POWERDOWN_FINISHED = 10;
     int MSGID_FM_EXIT = 11;
diff --git a/src/com/android/fmradio/FmMainActivity.java b/src/com/android/fmradio/FmMainActivity.java
index 82db51b..e53bca2 100644
--- a/src/com/android/fmradio/FmMainActivity.java
+++ b/src/com/android/fmradio/FmMainActivity.java
@@ -17,6 +17,8 @@
 package com.android.fmradio;
 
 import android.app.Activity;
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothProfile;
 import android.app.FragmentManager;
 import android.content.ActivityNotFoundException;
 import android.content.ComponentName;
@@ -50,6 +52,9 @@ import android.widget.RelativeLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 import android.widget.Toolbar;
+import android.os.SystemClock;
+
+
 
 import com.android.fmradio.FmStation.Station;
 import com.android.fmradio.dialogs.FmFavoriteEditDialog;
@@ -200,8 +205,11 @@ public class FmMainActivity extends Activity implements FmFavoriteEditDialog.Edi
                 case R.id.play_button:
                     if (mService.getPowerStatus() == FmService.POWER_UP) {
                         powerDownFm();
+                        mAudioManager.setParameters("fmradio=off;");
                     } else {
                         powerUpFm();
+                        mAudioManager.setParameters("fmradio=on;");
+
                     }
                     break;
                 default:
@@ -245,6 +253,7 @@ public class FmMainActivity extends Activity implements FmFavoriteEditDialog.Edi
                     boolean hasAntenna = bundle.getBoolean(FmListener.KEY_IS_SWITCH_ANTENNA);
                     // if receive headset plug out, need set headset mode on ui
                     if (hasAntenna) {
+                        mAudioManager.setParameters("fmradio=on;");
                         if (mIsActivityForeground) {
                             cancelNoHeadsetAnimation();
                             playMainAnimation();
@@ -252,6 +261,7 @@ public class FmMainActivity extends Activity implements FmFavoriteEditDialog.Edi
                             changeToMainLayout();
                         }
                     } else {
+                        mAudioManager.setParameters("fmradio=off;");
                         mMenuItemHeadset.setIcon(R.drawable.btn_fm_headset_selector);
                         if (mIsActivityForeground) {
                             cancelMainAnimation();
@@ -503,7 +513,7 @@ public class FmMainActivity extends Activity implements FmFavoriteEditDialog.Edi
         initUiComponent();
         registerButtonClickListener();
         mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
-
+        //mAudioManager.setParameters("fmradio=on;");
         mScroller = (FmScroller) findViewById(R.id.multiscroller);
         mScroller.initialize();
         mEventListener = new EventListener() {
@@ -528,6 +538,7 @@ public class FmMainActivity extends Activity implements FmFavoriteEditDialog.Edi
 
             @Override
             public void onPlay(int frequency) {
+                //mAudioManager.setParameters("fmradio=on;");
                 if (frequency != 0 && (mService.getPowerStatus() == FmService.POWER_UP)) {
                     tuneStation(frequency);
                 }
@@ -709,6 +720,7 @@ public class FmMainActivity extends Activity implements FmFavoriteEditDialog.Edi
             unbindService(mServiceConnection);
             mIsServiceBinded = false;
         }
+        //mAudioManager.setParameters("fmradio=off;");
         super.onStop();
     }
 
@@ -726,6 +738,7 @@ public class FmMainActivity extends Activity implements FmFavoriteEditDialog.Edi
             mService.unregisterFmRadioListener(mFmRadioListener);
         }
         mFmRadioListener = null;
+        //mAudioManager.setParameters("fmradio=off;");
         mScroller.closeAdapterCursor();
         mScroller.unregisterListener(mEventListener);
         super.onDestroy();
diff --git a/src/com/android/fmradio/FmNative.java b/src/com/android/fmradio/FmNative.java
index da8cbce..b9bdaa1 100644
--- a/src/com/android/fmradio/FmNative.java
+++ b/src/com/android/fmradio/FmNative.java
@@ -16,27 +16,33 @@
 
 package com.android.fmradio;
 
+import android.content.Context;
+
 /**
  * This class define FM native interface, will description FM native interface
  */
-public class FmNative {
-    static {
-        System.loadLibrary("fmjni");
-    }
+public abstract class FmNative {
+    private static FmNative mInstance = null;
+
+    public static synchronized FmNative getInstance() {
+	    if (mInstance == null)
+            mInstance = new FmNativeBroadcom();
+	    return mInstance;
+	}
 
     /**
      * Open FM device, call before power up
      *
      * @return (true,success; false, failed)
      */
-    static native boolean openDev();
+    public abstract boolean openDev(Context ctx);
 
     /**
      * Close FM device, call after power down
      *
      * @return (true, success; false, failed)
      */
-    static native boolean closeDev();
+    public abstract boolean closeDev();
 
     /**
      * power up FM with frequency use long antenna
@@ -45,7 +51,7 @@ public class FmNative {
      *
      * @return (true, success; false, failed)
      */
-    static native boolean powerUp(float frequency);
+    public abstract boolean powerUp(float frequency);
 
     /**
      * Power down FM
@@ -54,7 +60,7 @@ public class FmNative {
      *
      * @return (true, success; false, failed)
      */
-    static native boolean powerDown(int type);
+    public abstract boolean powerDown(int type);
 
     /**
      * tune to frequency
@@ -63,7 +69,7 @@ public class FmNative {
      *
      * @return (true, success; false, failed)
      */
-    static native boolean tune(float frequency);
+    public abstract boolean tune(float frequency);
 
     /**
      * seek with frequency in direction
@@ -73,14 +79,14 @@ public class FmNative {
      *
      * @return frequency(float)
      */
-    static native float seek(float frequency, boolean isUp);
+    public abstract float seek(float frequency, boolean isUp);
 
     /**
      * Auto scan(from 87.50-108.00)
      *
      * @return The scan station array(short)
      */
-    static native short[] autoScan();
+    public abstract short[] autoScan();
 
     /**
      * Stop scan, also can stop seek, other native when scan should call stop
@@ -88,7 +94,7 @@ public class FmNative {
      *
      * @return (true, can stop scan process; false, can't stop scan process)
      */
-    static native boolean stopScan();
+    public abstract boolean stopScan();
 
     /**
      * Open or close rds fuction
@@ -97,35 +103,35 @@ public class FmNative {
      *
      * @return rdsset
      */
-    static native int setRds(boolean rdson);
+    public abstract int setRds(boolean rdson);
 
     /**
      * Read rds events
      *
      * @return rds event type
      */
-    static native short readRds();
+    public abstract short readRds();
 
     /**
      * Get program service(program name)
      *
      * @return The program name
      */
-    static native byte[] getPs();
+    public abstract byte[] getPs();
 
     /**
      * Get radio text, RDS standard does not support Chinese character
      *
      * @return The LRT (Last Radio Text) bytes
      */
-    static native byte[] getLrText();
+    public abstract byte[] getLrText();
 
     /**
      * Active alternative frequencies
      *
      * @return The frequency(float)
      */
-    static native short activeAf();
+    public abstract short activeAf();
 
     /**
      * Mute or unmute FM voice
@@ -134,14 +140,14 @@ public class FmNative {
      *
      * @return (true, success; false, failed)
      */
-    static native int setMute(boolean mute);
+    public abstract int setMute(boolean mute);
 
     /**
      * Inquiry if RDS is support in driver
      *
      * @return (1, support; 0, NOT support; -1, error)
      */
-    static native int isRdsSupport();
+    public abstract int isRdsSupport();
 
     /**
      * Switch antenna
@@ -150,5 +156,8 @@ public class FmNative {
      *
      * @return (0, success; 1 failed; 2 not support)
      */
-    static native int switchAntenna(int antenna);
+    public abstract int switchAntenna(int antenna);
+
+    public abstract boolean setFMVolume (int volume);
+
 }
diff --git a/src/com/android/fmradio/FmRecorder.java b/src/com/android/fmradio/FmRecorder.java
index 389fbc2..699f0c6 100644
--- a/src/com/android/fmradio/FmRecorder.java
+++ b/src/com/android/fmradio/FmRecorder.java
@@ -30,7 +30,6 @@ import android.os.SystemClock;
 import android.provider.MediaStore;
 import android.text.format.DateFormat;
 import android.util.Log;
-
 import java.io.File;
 import java.io.IOException;
 import java.text.SimpleDateFormat;
diff --git a/src/com/android/fmradio/FmService.java b/src/com/android/fmradio/FmService.java
index c336397..3d234b1 100644
--- a/src/com/android/fmradio/FmService.java
+++ b/src/com/android/fmradio/FmService.java
@@ -17,12 +17,12 @@
 package com.android.fmradio;
 
 import android.app.ActivityManager;
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothProfile;
 import android.app.Notification;
 import android.app.Notification.BigTextStyle;
 import android.app.PendingIntent;
 import android.app.Service;
-import android.bluetooth.BluetoothAdapter;
-import android.bluetooth.BluetoothProfile;
 import android.content.BroadcastReceiver;
 import android.content.ContentResolver;
 import android.content.ContentValues;
@@ -67,6 +67,7 @@ import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Iterator;
 
+
 /**
  * Background service to control FM or do background tasks.
  */
@@ -217,6 +218,8 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
     private Notification.Builder mNotificationBuilder = null;
     private BigTextStyle mNotificationStyle = null;
 
+    private FmNative mFmNative = null;
+
     @Override
     public IBinder onBind(Intent intent) {
         return mBinder;
@@ -240,7 +243,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
      * Broadcast monitor external event, Other app want FM stop, Phone shut
      * down, screen state, headset state
      */
-    private class FmServiceBroadcastReceiver extends BroadcastReceiver {
+    public class FmServiceBroadcastReceiver extends BroadcastReceiver {
 
         @Override
         public void onReceive(Context context, Intent intent) {
@@ -276,9 +279,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
                 setRdsAsync(false);
                 // switch antenna when headset plug in or plug out
             } else if (Intent.ACTION_HEADSET_PLUG.equals(action)) {
-                // switch antenna should not impact audio focus status
                 mValueHeadSetPlug = (intent.getIntExtra("state", -1) == HEADSET_PLUG_IN) ? 0 : 1;
-
                 // Avoid Service is killed,and receive headset plug in
                 // broadcast again
                 if (!mIsServiceInited) {
@@ -567,9 +568,15 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
      *
      * @return true if FM device open, false FM device not open
      */
+    public void openDeviceAsync() {
+        mFmServiceHandler.removeMessages(FmListener.MSGID_OPENDEVICE_FINISHED);
+        Message msg = mFmServiceHandler.obtainMessage(FmListener.MSGID_OPENDEVICE_FINISHED);
+        mFmServiceHandler.sendMessage(msg);
+    }
+
     private boolean openDevice() {
         if (!mIsDeviceOpen) {
-            mIsDeviceOpen = FmNative.openDev();
+            mIsDeviceOpen = mFmNative.openDev(this);
         }
         return mIsDeviceOpen;
     }
@@ -582,7 +589,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
     private boolean closeDevice() {
         boolean isDeviceClose = false;
         if (mIsDeviceOpen) {
-            isDeviceClose = FmNative.closeDev();
+            isDeviceClose = mFmNative.closeDev();
             mIsDeviceOpen = !isDeviceClose;
         }
         // quit looper
@@ -636,12 +643,12 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
             openDevice();
         }
 
-        if (!FmNative.powerUp(frequency)) {
+        if (!mFmNative.powerUp(frequency)) {
             mPowerStatus = POWER_DOWN;
             return false;
         }
         mPowerStatus = POWER_UP;
-        // need mute after power up
+        // need mute after power up 
         setMute(true);
 
         return (mPowerStatus == POWER_UP);
@@ -707,7 +714,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
         setRds(false);
         enableFmAudio(false);
 
-        if (!FmNative.powerDown(0)) {
+        if (!mFmNative.powerDown(0)) {
 
             if (isRdsSupported()) {
                 stopRdsThread();
@@ -760,7 +767,8 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
     private boolean tuneStation(float frequency) {
         if (mPowerStatus == POWER_UP) {
             setRds(false);
-            boolean bRet = FmNative.tune(frequency);
+            setMute(true);
+            boolean bRet = mFmNative.tune(frequency);
             if (bRet) {
                 setRds(true);
                 mCurrentStation = FmUtils.computeStation(frequency);
@@ -812,7 +820,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
 
         setRds(false);
         mIsNativeSeeking = true;
-        float fRet = FmNative.seek(frequency, isUp);
+        float fRet = mFmNative.seek(frequency, isUp);
         mIsNativeSeeking = false;
         // make mIsStopScanCalled false, avoid stop scan make this true,
         // when start scan, it will return null.
@@ -836,7 +844,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
         short[] stationsInShort = null;
         if (!mIsStopScanCalled) {
             mIsNativeScanning = true;
-            stationsInShort = FmNative.autoScan();
+            stationsInShort = mFmNative.autoScan();
             mIsNativeScanning = false;
         }
 
@@ -885,7 +893,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
         mFmServiceHandler.removeMessages(FmListener.MSGID_SEEK_FINISHED);
         if (mIsNativeScanning || mIsNativeSeeking) {
             mIsStopScanCalled = true;
-            bRet = FmNative.stopScan();
+            bRet = mFmNative.stopScan();
         }
         return bRet;
     }
@@ -920,7 +928,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
         }
         int ret = -1;
         if (isRdsSupported()) {
-            ret = FmNative.setRds(on);
+            ret = mFmNative.setRds(on);
         }
         return ret;
     }
@@ -959,7 +967,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
             return -1;
         }
 
-        int frequency = FmNative.activeAf();
+        int frequency = mFmNative.activeAf();
         return frequency;
     }
 
@@ -992,7 +1000,11 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
             Log.w(TAG, "setMute, FM is not powered up");
             return -1;
         }
-        int iRet = FmNative.setMute(mute);
+        int iRet = mFmNative.setMute(mute);
+//        if (mute) {mAudioManager.setParameters("fmradio=off;");}
+//        else {
+//          mAudioManager.setParameters("fmradio=on;");
+//        }
         mIsMuted = mute;
         return iRet;
     }
@@ -1012,7 +1024,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
      * @return (true, support; false, not support)
      */
     public boolean isRdsSupported() {
-        boolean isRdsSupported = (FmNative.isRdsSupport() == 1);
+        boolean isRdsSupported = (mFmNative.isRdsSupport() == 1);
         return isRdsSupported;
     }
 
@@ -1104,7 +1116,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
      */
     private int switchAntenna(int antenna) {
         // if fm not powerup, switchAntenna will flag whether has earphone
-        int ret = FmNative.switchAntenna(antenna);
+        int ret = mFmNative.switchAntenna(antenna);
         return ret;
     }
 
@@ -1275,6 +1287,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
     @Override
     public void onCreate() {
         super.onCreate();
+        mFmNative = FmNative.getInstance();
         mContext = getApplicationContext();
         mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
         mActivityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
@@ -1291,7 +1304,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
         handlerThread.start();
         mFmServiceHandler = new FmRadioServiceHandler(handlerThread.getLooper());
 
-        openDevice();
+        openDeviceAsync();
         // set speaker to default status, avoid setting->clear data.
         setForceUse(mIsSpeakerUsed);
 
@@ -1478,6 +1491,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
         exitRenderThread();
         releaseAudioPatch();
         unregisterAudioPortUpdateListener();
+        mFmNative = null;
         super.onDestroy();
     }
 
@@ -1547,13 +1561,13 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
                         break;
                     }
 
-                    int iRdsEvents = FmNative.readRds();
+                    int iRdsEvents = mFmNative.readRds();
                     if (iRdsEvents != 0) {
                         Log.d(TAG, "startRdsThread, is rds events: " + iRdsEvents);
                     }
 
                     if (RDS_EVENT_PROGRAMNAME == (RDS_EVENT_PROGRAMNAME & iRdsEvents)) {
-                        byte[] bytePS = FmNative.getPs();
+                        byte[] bytePS = mFmNative.getPs();
                         if (null != bytePS) {
                             String ps = new String(bytePS).trim();
                             if (!mPsString.equals(ps)) {
@@ -1575,7 +1589,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
                     }
 
                     if (RDS_EVENT_LAST_RADIOTEXT == (RDS_EVENT_LAST_RADIOTEXT & iRdsEvents)) {
-                        byte[] byteLRText = FmNative.getLrText();
+                        byte[] byteLRText = mFmNative.getLrText();
                         if (null != byteLRText) {
                             String rds = new String(byteLRText).trim();
                             if (!mRtTextString.equals(rds)) {
@@ -1605,7 +1619,7 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
                         } else if (mPowerStatus == POWER_DOWN) {
                             Log.d(TAG, "startRdsThread, fm is power down, do nothing.");
                         } else {
-                            int iFreq = FmNative.activeAf();
+                            int iFreq = mFmNative.activeAf();
                             if (FmUtils.isValidStation(iFreq)) {
                                 // if the new frequency is not equal to current
                                 // frequency.
@@ -2409,6 +2423,11 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
 
             switch (msg.what) {
 
+                // Open Device
+                case FmListener.MSGID_OPENDEVICE_FINISHED:
+                    openDevice();
+                    break;
+
                 // power up
                 case FmListener.MSGID_POWERUP_FINISHED:
                     bundle = msg.getData();
@@ -2739,10 +2758,10 @@ public class FmService extends Service implements FmRecorder.OnRecorderStateChan
             return false;
         }
         boolean isSeekTune = false;
-        float seekStation = FmNative.seek(frequency, false);
+        float seekStation = mFmNative.seek(frequency, false);
         int station = FmUtils.computeStation(seekStation);
         if (FmUtils.isValidStation(station)) {
-            isSeekTune = FmNative.tune(seekStation);
+            isSeekTune = mFmNative.tune(seekStation);
             if (isSeekTune) {
                 playFrequency(seekStation);
             }
diff --git a/src/com/android/fmradio/FmUtils.java b/src/com/android/fmradio/FmUtils.java
index b6219fd..b081f5f 100644
--- a/src/com/android/fmradio/FmUtils.java
+++ b/src/com/android/fmradio/FmUtils.java
@@ -66,6 +66,14 @@ public class FmUtils {
     // StorageManager For FM record
     private static StorageManager sStorageManager = null;
 
+    public static int getHighestStation() {
+        return HIGHEST_STATION;
+    }
+
+    public static int getLowestStation() {
+        return LOWEST_STATION;
+    }
+
     /**
      * Whether the frequency is valid.
      *
